{% comment %}
  Renders product price

  Accepts Parameters:
  - product : {Object} Prduct liquid object
  - is_product_outofstock : {Boolean} If product is outofstock or avaiable
  - True : If avaialble
  - False : If outofstock
  - show_custom_badges: Enable or disable custom badges
{% endcomment %}

{% liquid
  if use_variant
    assign current_product = product.selected_or_first_available_variant
  else
    assign current_product = product
  endif
  assign compare_at_price = current_product.compare_at_price
  if customer and customer.metafields.netwise.segment.value != 'draft'
    assign segment_price = product.selected_or_first_available_variant.metafields.netwise.catalog_price.value[customer.metafields.netwise.segment.value]
    if segment_price
      assign compare_at_price = product.price
      assign segment_price = segment_price.price | times: 100
      assign money_price = segment_price | times: shop.metafields.netwise.forex.value[shop.currency]
      assign money_price = money_price | divided_by: shop.metafields.netwise.forex.value[cart.currency.iso_code]

      if settings.currency_code_enabled
        assign money_price = money_price | money_with_currency
      else
        assign money_price = money_price | money
      endif
    endif
  endif
%}
<div> {{ product.price| json }} </div>
 <script>
   console.log(money_price)
   </script>
<div class="product-price__wrapper {{ container_class | default: '' }}">
  <div class="product-price_top {% if product.selected_or_first_available_variant.unit_price -%} add-bottom-spacing {%- endif -%}">
    {%- if use_variant -%}
      {% comment %} Logic for prices to render on single product when known Variant {% endcomment %}

      {% comment %} For Price to be render on products page /Featured product {% endcomment %}
      {%- if segment_price -%}
  <span id="meta-field" data-value="{{ product.selected_or_first_available_variant.metafields.netwise.catalog_price.value[customer.metafields.netwise.segment.value].volumePricing | json | escape }}" hidden></span>

  <script>
    document.addEventListener('DOMContentLoaded', function() {

      const priceDisplay = document.querySelector('.price');
      console.log("-----------------------------------------", pric)
      if (priceDisplay && !priceDisplay.hasAttribute('data-original-price')) {
        priceDisplay.setAttribute('data-original-price', priceDisplay.textContent.trim());
      }
    
      const metaFieldElement = document.getElementById('meta-field');
      const metaFieldValue = metaFieldElement.getAttribute('data-value');
      let quantity = 1; 

      const decodedValue = metaFieldValue
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'");
      const parsedData = JSON.parse(decodedValue);
    
      const getUnitPrice = (qty) => {

        const sortedPricing = parsedData.sort((a, b) => parseInt(b.quantity) - parseInt(a.quantity));
    
        const minQuantity = parseInt(sortedPricing[sortedPricing.length - 1].quantity);

        if (qty < minQuantity) {
          console.log(`Quantity is below the minimum of ${minQuantity}. Restoring original price.`);
          return null;
        }
    
        let selectedPrice = null;
        for (let tier of sortedPricing) {
          if (qty >= parseInt(tier.quantity)) {
            selectedPrice = parseFloat(tier.price);
            break;
          }
        }
        return selectedPrice;
      };

      const updateDisplay = (price) => {
        if (priceDisplay) {
          if (price !== null) {
            // Inject the volume price per item
            priceDisplay.textContent = `$${price.toFixed(2)}`;
          } else {
            // Restore the original price from the data attribute
            const originalPrice = priceDisplay.getAttribute('data-original-price');
            priceDisplay.textContent = originalPrice;
          }
        }
      };
    
      document.addEventListener('click', (event) => {
        if (event.target.closest('.quantity__button')) {
          const quantityInput = event.target.closest('quantity-input').querySelector('.quantity__input');
          quantity = parseInt(quantityInput.value);
          const pricePerItem = getUnitPrice(quantity);
          updateDisplay(pricePerItem);
        }
      });
    
      document.addEventListener('input', (event) => {
        if (event.target.matches('.quantity__input')) {
          quantity = parseInt(event.target.value);
          const pricePerItem = getUnitPrice(quantity);
          updateDisplay(pricePerItem);
        }
      });
    });
    
  </script>
{%- endif -%}
      <span class="price">
        {% if segment_price  %}
        {{ money_price }}
        {% else %}
        {% if settings.currency_code_enabled %}
          {{ current_product.price | money_with_currency }}
        {% else %}
          {{ current_product.price | money }}
        {% endif %}
        {% endif %}
      {%- if on_sale %}
        {% if compare_at_price %}
          <del class="original-price">
            {% if settings.currency_code_enabled %}
              {{ current_product.compare_at_price | money_with_currency }}
            {% else %}
              {{ current_product.compare_at_price | money }}
            {% endif %}
          </del>
          {% unless hide_percentage_off %}
            <span class="offer">
              {%- render 'discount-formate',
                allow_false: true,
                product: current_product,
                current_product: product,
                show_custom_badges: show_custom_badges,
                hide_badges: hide_badges
              -%}
            </span>
          {% endunless %}
        {% endif %}
      {% else %}
        {% unless hide_badges %}
          {% if show_custom_badges %}
            {% render 'product-tags-badges', current_product: product, remaining_count: 2 %}
          {% endif %}
        {% endunless %}
      {% endif %}

    {%- else -%}
      {% comment %} For price to be render on product card considering rendering prices of variant which are different {% endcomment %}

      {% comment %} 1) if price varies between varaints and has compare price {% endcomment %}
      {% if current_product.price_varies and compare_at_price %}
        {%- assign cheapest_variant = product.variants | sort: 'price' | first -%}
        
        <span class="price">
            
          {%- capture price_min -%}
            {%- if settings.currency_code_enabled -%}
              {{- cheapest_variant.price | money_with_currency -}}
            {%- else -%}
              {{- cheapest_variant.price | money -}}
            {%- endif -%}
          {%- endcapture -%}
          {{- 'products.product.price.from_price_html' | t: price: price_min -}}
        </span>
        {%- if on_sale %}
          {%- if  product.price < current_product.compare_at_price%} price--on-sale{% endif -%}
          <del class="original-price">
            {% if settings.currency_code_enabled %}
              {{ cheapest_variant.compare_at_price | money_with_currency }}
            {% else %}
              {{ cheapest_variant.compare_at_price | money }}
            {% endif %}
          </del>
          {% unless hide_percentage_off %}
            <span class="offer">
              {%- render 'discount-formate',
                allow_false: true,
                product: cheapest_variant,
                show_custom_badges: show_custom_badges
              -%}
            </span>
          {% endunless %}
        {% else %}
          {% unless hide_badges %}
            {% if show_custom_badges %}
              {% render 'product-tags-badges', current_product: product, remaining_count: 2 %}
            {% endif %}
          {% endunless %}
        {% endif %}

      {%- elsif  current_product.price < current_product.compare_at_price -%}
        {% unless has_no_varaint %}
          <span class="price">
            {% if settings.currency_code_enabled %}
              {{ current_product.price | money_with_currency }}
            {% else %}
              {{ current_product.price | money }}
            {% endif %}
          </span>
        {% else %}
          <span class="price">
            {% if settings.currency_code_enabled %}
              {{ product.selected_or_first_available_variant.price | money_with_currency }}
            {% else %}
              {{ product.selected_or_first_available_variant.price | money }}
            {% endif %}
          </span>
        {% endunless %}
        {%- if on_sale %}
          <del class="original-price">
            {% if settings.currency_code_enabled %}
              {{ current_product.compare_at_price | money_with_currency }}
            {% else %}
              {{ current_product.compare_at_price | money }}
            {% endif %}
          </del>
          {% unless hide_percentage_off %}
            <span class="offer">
              {%- render 'discount-formate',
                allow_false: true,
                product: current_product,
                show_custom_badges: show_custom_badges
              -%}
            </span>
          {% endunless %}
        {% else %}
          {% unless hide_badges %}
            {% if show_custom_badges %}
              {% render 'product-tags-badges', current_product: product, remaining_count: 2 %}
            {% endif %}
          {% endunless %}
        {% endif %}

      {%- elsif current_product.price_varies -%}
        {%- capture price_min -%}
          {% if settings.currency_code_enabled %}
            {{ current_product.price_min | money_with_currency }}
          {% else %}
            {{ current_product.price_min | money }}
          {% endif %}
        {%- endcapture -%}

        <span class="price">
          {{- 'products.product.price.from_price_html' | t: price: price_min -}}
        </span>
      {%- else -%}
        {%- unless has_no_varaint -%}
          <span class="price">
            {% if settings.currency_code_enabled %}
              {{ current_product.price | money_with_currency }}
            {% else %}
              {{ current_product.price | money }}
            {% endif %}
          </span>
        {%- else -%}
          <span class="price">
            {% if settings.currency_code_enabled %}
              {{ product.selected_or_first_available_variant.price | money_with_currency }}
            {% else %}
              {{ product.selected_or_first_available_variant.price | money }}
            {% endif %}
          </span>
        {%- endunless -%}
      {% endif %}
    {%- endif -%}
  </div>
  <div
    class="product-price_bottom"
    {% unless product.selected_or_first_available_variant.unit_price -%}
      hidden
    {%- endunless -%}
  >
    <p class="fnt-14 text-color product-unit-price__measurment">
      <span>{{ product.selected_or_first_available_variant.unit_price | money }}</span><span> / </span>
      {%- if product.selected_or_first_available_variant.unit_price_measurement.reference_value != 1 -%}
        <span>{{ product.selected_or_first_available_variant.unit_price_measurement.reference_value }}</span>
      {%- endif -%}
      {{ product.selected_or_first_available_variant.unit_price_measurement.reference_unit }}
    </p>
  </div>
</div>
